/**
 * Copyright (C) 2020 TU Dresden
 * 
 * This benchmarks is supposed to implement an A*-search through a grid.
 * However, it appears that the Savina implementation is incomplete and does not
 * correctly implement A*. A key component of A* is cost estimation, which helps
 * to guide the search into the right direction. However, this is completely
 * missing in the Savina implementation. Instead the search is underacted and
 * behaves more like a brute force algorithm. It seems more to be directed by
 * accident, as some neighbors are visited before others due to the way each
 * nodes lists its neighbors. Moreover, the algorithm does not search for the
 * optimal path, but only finds a path.
 *
 * The manager reactor contains and initializes a 3-dimensional grid of nodes.
 * Each node is connected to some of its neighbors. To which ones, is decided
 * randomly during initialization.
 *
 * The search starts at a single origin node. This node is send to the first
 * worker. The worker then collects all neighbors of this node into a queue.
 * When done, it retrieves the first node from this queue and again adds all
 * unvisited neighbors to the queue. This process is continued until a certain
 * number of nodes have been visited. How many nodes each worker visits is
 * specified by the `threshold` parameter.
 *
 * When finished, the worker sends the list of remaining nodes to visit back to
 * the manager, which then forwards one of these nodes to each of the workers to
 * start a searches from these nodes.
 *
 * The use of a list for sending nodes back from the workers to the manager is a
 * noteworthy difference between our implementation and the Savina suite. In the
 * Akka implementation, each node is send as an individual message. However, in
 * LF, we cannot send multiple messages at the same tag, and introducing a delay
 * via a logical action would be very costly for many messages. Instead, we send
 * only a single message containing a list of nodes.
 *
 * It is also important to note that the workers in this benchmark operate on
 * shared state (the grid). Each node has an attribute that indicates its
 * parent. Initially, this attribute is uninitialized, but it is updated when it
 * is visited by a worker. Thus, the parent attribute can also be used to
 * determine whether a node was already visited. However, multiple reactions may
 * access the parent attribute of the same node at the same time. Thus,
 * similarly to the Akka implementation, the attribute is implemented as an
 * atomic variable. However, this does not fully eliminate the race condition.
 * Sometimes one reaction might write first and sometimes another reaction
 * writes first, effectively introducing nondeterminism into the benchmark.
 *
 * The peculiarities of this design also lead to another quirk. The benchmark
 * does not scale well with the number of threads. A single threaded execution
 * is much faster than a multi threaded one. Interestingly the same effect can
 * be observed in the Akka implementation. This indicates that the problem lies
 * in the benchmark itself, and not (only) in the LF runtime. In fact,
 * multi-threaded executions have the tendency to perform much more work as
 * compared to single threaded execution. This is likely due to the race-conditions
 * mentioned before.
 *  
 * @author Christian Menard
 * @author Hannes Klein
 */

target Cpp {
    build-type : Release,
    no-runtime-validation: true,
    cmake-include: "GuidedSearch/GuidedSearch.cmake",
    logging: "warn"
};

import BenchmarkRunner from "../BenchmarkRunner.lf";

public preamble {=
    #include "GuidedSearch/GuidedSearchCommon.hh"
    #include <deque>
    #include <list>
=}

reactor Manager(numWorkers: size_t{20}, gridSize: size_t{30}, priorities: size_t{30}) {

    state grid: Grid(gridSize, priorities);
    state nodesToVisit: std::deque<GridNode*>;
    state pathWasFound: bool{false};
    
    input start: void;
    output finished: void;
    
    output[numWorkers] search: WorkMessage;
    input[numWorkers] pathFound: void;
    input[numWorkers] moreNodesToVisit: std::deque<GridNode*>;
    
    logical action next;
    
    reaction (start) -> next {=
        srand(123456);
        grid.initializeData(); // reset the grid
        nodesToVisit.clear();
        pathWasFound = false;
        
        // start execution, first visit the origin node
        nodesToVisit.push_back(grid.originNode());
        next.schedule();
    =}
    
    reaction (next) -> next, search {=
        // abort if path was found
        if (pathWasFound) {
            return;
        }

        // send nodes from the internal queue to all workers
        size_t workerIndex{0};        
        while(!nodesToVisit.empty() && workerIndex < numWorkers) {
            GridNode* startNode = nodesToVisit.front();
            nodesToVisit.pop_front();
            search[workerIndex].set(WorkMessage{startNode, grid.targetNode()});
            workerIndex++;
        }
        
         // continue with the next iteration
         next.schedule();
    =}
    
    reaction(pathFound) -> finished {=
        pathWasFound = true;
        bool valid = grid.validate();
        reactor::log::Info() << "Found a path through the grid";
        reactor::log::Info() << std::boolalpha << "Result valid: " << valid << std::noboolalpha;
        finished.set();
    =}
    
    reaction (moreNodesToVisit) {=
        // collect more nodes to visit from all workers and store them in the internal queue
        for (auto i: moreNodesToVisit.present_indices_unsortedes()) {
            const auto& nodes = *(moreNodesToVisit[i].get());
            if (!nodes.empty()) {
                nodesToVisit.insert(nodesToVisit.end(), nodes.begin(), nodes.end());
            }
        }
    =}
}

reactor Worker(bank_index: size_t{0}, threshold: size_t{1024}) {
    
    input search: WorkMessage;
    output pathFound: void;
    output moreNodesToVisit: std::deque<GridNode*>;
    
    reaction(search) -> pathFound, moreNodesToVisit {=
        auto workMessage = search.get();
        GridNode* targetNode = workMessage->target;
        GridNode* currentNode = workMessage->node;

        reactor::log::Info() << "Worker " << bank_index << ": search path from "
                             << *currentNode << " to " << *targetNode;

        auto workQueue = reactor::make_mutable_value<std::deque<GridNode*>>();
        
        workQueue->push_back(currentNode);
        
        // start the search, but visit at most threshold nodes
        size_t nodesProcessed{0};
        while(!workQueue->empty() && nodesProcessed < threshold) {
            
            nodesProcessed++;
            busyWait();
            
            GridNode* loopNode = workQueue->front();
            workQueue->pop_front();
            size_t numNeighbors = loopNode->numNeighbors();
            
            for (size_t i{0}; i < numNeighbors; i++) {
                GridNode* loopNeighbor = loopNode->neighbor(i);
                bool success = loopNeighbor->setParent(loopNode);
                if(success) {
                    if(loopNeighbor == targetNode) {
                        pathFound.set();
                        return;
                    } else {
                        workQueue->push_back(loopNeighbor);
                    }
                }
            }
        }
        
        if(!workQueue->empty()) {
            moreNodesToVisit.set(std::move(workQueue));
        } 
        // Otherwise (if the queue is empty) we have hit a dead end
    =}

    method busyWait() {=
        for (int i = 0; i < 100; i++) {
            rand();
        }
    =}
}


main reactor (numIterations: size_t{12}, threshold: size_t{1024}, gridSize: size_t{30}, priorities: size_t{30}, numWorkers: size_t{20}) {
    
    manager = new Manager(numWorkers=numWorkers, gridSize=gridSize, priorities=priorities);
    runner = new BenchmarkRunner(numIterations=numIterations);
    workers = new[numWorkers] Worker(threshold=threshold);
    
    reaction(startup) {=       
        printBenchmarkInfo("GuidedSearchBenchmark");
        printArgs("numIterations", numIterations, "threshold", threshold, "gridSize", gridSize, "priorities", priorities, "numWorkers", numWorkers);
        printSystemInfo();
    =}

    runner.start -> manager.start;
    manager.finished -> runner.finished;
    
    manager.search -> workers.search;
    workers.pathFound -> manager.pathFound;
    workers.moreNodesToVisit -> manager.moreNodesToVisit;
}
