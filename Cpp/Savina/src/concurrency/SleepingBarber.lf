/**
 * Copyright (C) 2020 TU Dresden
 *
 * In this benchmark, there are four main components: The barber, a waiting
 * room, a customer factory and the customers. The customer factory controls the
 * production of new customers and sends them to the waiting room. If the
 * waiting room is full, then the customers return and try again later. If the
 * waiting room has empty seats, then the customer enters and waits to be served
 * by the barber. In the Savina implementation, the waiting room takes the role
 * of a central manager. If the room is empty, it tells the barber to go sleep.
 * If a customer comes and the barber sleeps, the waiting room wakes up the
 * barber and sends the customer in to the barber to be served. When the barber
 * finishes, the waiting room sends in the next customer. If there are no more
 * customers, the waiting room tells the barber to sleep again.
 *
 * In the Akka implementation production of customers and processing at the
 * barber happens at certain rates. The workload of the factory and the barber
 * has a random length and the average workload duration is controlled by the
 * rate parameters. Depending on the rates selected and the precise runtime
 * scheduling, the waiting room will have a constantly changing state in an
 * actor implementation.
 *
 * In an LF implementation, the processing time of the workload does not
 * influence the logical arrival and processing rates. Even with a random
 * workload, the customer factory and the barber could operate logically
 * synchronously in LF. To mimic the behaviour of the original Akka
 * implementation and to have a more realistic setup, this LF implementation
 * also uses physical actions to provide varying logical (and physical) delays.
 * This also ensures that the waiting room constantly changes state and fills up
 * or empties out occasionally. Note that due to the use of physical actions,
 * simultaneous events are very unlikely (if not impossible since two readings
 * of the physical clock should always show an increment on common hardware).
 * With our current runtime, this eliminates all opportunities for letting the
 * barber and the factory operate in parallel. Since the complexity of
 * computations involved in this benchmark is low, this isn't a problem for
 * performance though.
 * 
 * @author Christian Menard
 * @author Tassilo Tanneberger 
 * @author Hannes Klein
 */

target Cpp {
    build-type : Release,
    no-runtime-validation: true,
    cmake-include: "../IncludeHeaders.cmake",
    keepalive: true,
    logging: "warn",
};

import BenchmarkRunner from "../BenchmarkRunner.lf";

public preamble {=
    #include <deque>
    
    #include "PseudoRandom.hh"
    #include "reactor-cpp/logging.hh"
    
    // function used for busy waiting in the benchmark
    size_t busyWait(size_t limit);
=}

private preamble {=
    size_t busyWait(size_t limit) {
        size_t test{0};
        for(size_t k{0}; k < limit; k++) {
            rand();
            test++;
        }
        return test;
    }
=}

reactor CustomerFactory(numCustomers:size_t(2000), averageProductionRate:size_t(1000)) {
    input start: void;
    output finished: void;
    
    output sendCustomer: size_t;
    input[numCustomers] customerDone: void;
    input[numCustomers] customerReturned: void;

    physical action createNextCustomer: void;
    physical action sendCustomerAgain: size_t
    
    state doneCustomers: size_t{0};
    state attempts: size_t{0};
    state next_customer_id: size_t{0};
    state random: PseudoRandom;
    
    reaction(start) -> createNextCustomer {=
        // reset state
        doneCustomers = 0;
        attempts = 0;
        next_customer_id = 0;
        random = PseudoRandom();
        // start "creating" customers
        createNextCustomer.schedule();
    =}
    
    reaction (createNextCustomer) -> sendCustomer, createNextCustomer {=
        // get a random production delay
        int delay = (random.nextInt(averageProductionRate) + 10);
        
        // apply a physical delay
        busyWait(delay);
        
        // send the new customer to the waiting room
        reactor::log::Info() << "Factory: Send customer " << next_customer_id << " to the waiting room";
        attempts++;
        sendCustomer.set(next_customer_id);
        
        next_customer_id++;
        if (next_customer_id < numCustomers) {
            // schedule again
            createNextCustomer.schedule();
        }
    =}
    
    reaction (sendCustomerAgain) -> sendCustomer {=
        size_t customer_id = *sendCustomerAgain.get();
        reactor::log::Info() << "Factory: Send customer " << customer_id << " again to the waiting room";
        attempts++;

        sendCustomer.set(customer_id);
    =}
    
    reaction (customerReturned) -> sendCustomerAgain {=

        for (auto i: customerReturned.present_indices_unsortedes()) {
            /*
             * The customer returned because the waiting room is full. We
             * send the customer back again immediately. Due to the use of a
             * physical action, we always introduce a small logical delay,
             * which ensures that the program can move forward.
             */
            sendCustomerAgain.schedule(i);                
        }
    =}
    
    reaction (customerDone) -> finished {=

        for (auto _: customerDone.present_indices_unsortedes()) {
            doneCustomers++;
            if (doneCustomers == numCustomers) {
                std::cout << "Hair cuts given: " << doneCustomers << "; Total attempts: " << attempts << "\n";
                finished.set();
            }
        }
    =}
}

reactor WaitingRoom(capacity:size_t(1000), numCustomers:size_t(2000)) {
    input reset_state: void;
    
    input receiveCustomer: size_t;
    
    output[numCustomers] full: void;
    output[numCustomers] wait: void;
    
    input barberNext: void;
    output barberEnter: size_t;
    output barberWait: void;
    
    state queue: std::deque<size_t>{};
    state barberAsleep: bool{true};
    
    reaction(reset_state) {=
        barberAsleep = true;
    =}
    
    reaction (receiveCustomer) -> full, wait, barberEnter {=
         size_t customer_id = *receiveCustomer.get();
         reactor::log::Info() << "Room: Customer " << customer_id << " tries to enter";
         
         if (queue.size() == capacity) {
             full[customer_id].set();
         } else {
            if (barberAsleep) {
                barberAsleep = false;
                barberEnter.set(customer_id);
            } else {
                queue.push_back(customer_id);
                wait[customer_id].set();    
            }
        }
    =}
    
    reaction (barberNext) -> barberEnter, barberWait {=
        if (queue.empty()) {
            barberAsleep = true;
            barberWait.set();
        } else {
            barberEnter.set(queue.front());
            queue.pop_front();
        }
    =}
}

reactor Customer(bank_index:size_t(0)) {
    input roomFull: void;
    input wait: void;
    input startCutting: void;
    input doneCutting: void; 

    output returned: void;
    output done: void;
    
    reaction (roomFull) -> returned {=
        reactor::log::Info() << "Customer " << bank_index << ": The waiting room is full. I am leaving.";
        returned.set();
    =}
    
    reaction (wait) {=
        reactor::log::Info() << "Customer " << bank_index << ": I will wait.";
    =}
    
    reaction (startCutting) {= 
        reactor::log::Info() << "Customer " << bank_index << ": I am now being served.";
    =}
    
    reaction (doneCutting) -> done {=
        reactor::log::Info() << "Customer " << bank_index << ": I have been served.";
        done.set();
    =}
}

reactor Barber(averageHaircutRate:size_t(1000), numCustomers:size_t(2000)) {
    input reset_state: void;
    input enter: size_t;
    input wait: void;
        
    output[numCustomers] startCutting: void;
    output[numCustomers] doneCutting: void;
    output next: void;
    
    physical action done: size_t;
    
    state random: PseudoRandom;
    
    reaction (reset_state) {=
        random = PseudoRandom();
    =}
      
    reaction (done) -> doneCutting, next {=
        size_t customer_id = *done.get();
        doneCutting[customer_id].set();
        next.set();
    =}
    
    reaction (enter) -> startCutting, done {=
        size_t customer_id = *enter.get();
        startCutting[customer_id].set();
        
        // calculate a random delay
        int delay = random.nextInt(averageHaircutRate) + 10;
        
        // do the actual cutting and apply a physical delay
        reactor::log::Info() << "Barber: Processing customer " << customer_id;
        busyWait(delay);
        
        // Notify the customer 
        done.schedule(customer_id);
    =}
    
    reaction (wait) {=
        reactor::log::Info() << "Barber: No customers. Going to sleep.";
    =}
}

main reactor (numIterations:size_t(12), waitingRoomSize:size_t(1000), averageProductionRate:size_t(1000), averageHaircutRate:size_t(1000), numHaircuts:size_t(2000)) {
    
    runner = new BenchmarkRunner(numIterations=numIterations);
    factory = new CustomerFactory(numCustomers=numHaircuts, averageProductionRate=averageProductionRate);
    room = new WaitingRoom(capacity=waitingRoomSize, numCustomers=numHaircuts);
    barber = new Barber(averageHaircutRate=averageHaircutRate, numCustomers=numHaircuts)
    customers = new[numHaircuts] Customer();
    
    reaction(startup) {=
        printBenchmarkInfo("SleepingBarberReactorLFCppBenchmark");
        printArgs("numIterations", numIterations, "waitingRoomSize", waitingRoomSize, "averageProductionRate", averageProductionRate, "averageHaircutRate", averageHaircutRate, "numHaircuts", numHaircuts);
        printSystemInfo();
    =}
    
    (runner.start)+ -> factory.start, barber.reset_state, room.reset_state;
    factory.finished -> runner.finished;
    
    factory.sendCustomer -> room.receiveCustomer;
    room.full -> customers.roomFull;
    room.wait -> customers.wait;
    room.barberEnter -> barber.enter;
    room.barberWait -> barber.wait;
    barber.next -> room.barberNext;
    barber.startCutting -> customers.startCutting;
    barber.doneCutting -> customers.doneCutting;
    customers.done -> factory.customerDone;
    
    customers.returned -> factory.customerReturned;
}
